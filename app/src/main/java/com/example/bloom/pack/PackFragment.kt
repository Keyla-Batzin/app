package com.example.bloom.pack

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.bloom.R
import com.example.bloom.compra.Compra
import com.example.bloom.ramosflores.RamoFlor
import com.example.bloom.ramosflores.RamoFlorAdapter
import com.google.gson.Gson
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class PacksFragment : Fragment() {
    /*
    private lateinit var rv: RecyclerView
    private lateinit var adapter: PackAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.fragment_pack, container, false)

        rv = view.findViewById(R.id.recyclerPack)
        rv.layoutManager = GridLayoutManager(requireContext(), 3) // 3 columnas

        // 游댳 Asignar un adaptador vac칤o antes de la carga de datos
        adapter = PackAdapter(emptyList()) { pack ->
            // L칩gica para a침adir el 칤tem a la tabla Compra
            a침adirACompra(pack)
        }
        rv.adapter = adapter

        // Cargar datos
        actualizaPacks()

        return view
    }

    private fun actualizaPacks() {
        val service = PackAPI.API()
        viewLifecycleOwner.lifecycleScope.launch(Dispatchers.IO) {
            try {
                val listaPacks = service.obtenerTodosPacks()

                // Verificar si la lista no es nula
                if (!listaPacks.isNullOrEmpty()) {
                    withContext(Dispatchers.Main) {
                        // Actualizar el adaptador con los nuevos datos
                        adapter = PackAdapter(listaPacks) { pack ->
                            a침adirACompra(pack)
                        }
                        rv.adapter = adapter
                    }
                } else {
                    Log.e("API", "Lista de packs vac칤a o nula")
                }
            } catch (e: Exception) {
                Log.e("API", "Error al obtener datos", e)
            }
        }
    }

    private fun a침adirACompra(pack: Pack) {
        // Crear un objeto Compra con los datos del RamoFlor
        val nuevaCompra = Compra(
            id = 0,  // A침ade el campo id con un valor por defecto
            nombre = pack.nombre,
            precio = pack.precio,  // Aseg칰rate de que sea una cadena de texto
            url = pack.url
        )

        // Imprimir el JSON que se enviar치
        val gson = Gson()
        val json = gson.toJson(nuevaCompra)
        Log.d("API", "JSON enviado: $json")

        // Hacer la llamada POST a la API
        viewLifecycleOwner.lifecycleScope.launch(Dispatchers.IO) {
            try {
                val response = PackAPI.API().crearCompra(nuevaCompra)
                withContext(Dispatchers.Main) {
                    // Mostrar un mensaje de 칠xito
                    Log.d("API", "A침adido a Compra: ${response.message}")
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    // Mostrar un mensaje de error
                    Log.e("API", "Error al a침adir a Compra: ${e.message}")
                }
            }
        }
    }
     */
}